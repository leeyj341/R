num < 100
test <- "myR"
test
test <- myR
myR <- num
test <- myR
test
result <- 100 #숫자형
result1 <- 100 #숫자형
result1
result2 <- "test" #문자형
result2
#R에서 제공되는 함수를 이용할 수 있으며
#
class(result)
class(result2)
test <- as.character(result1)
test
test <- as.numeric(result1)
test
# = , <- 같은 것처럼 보이지만 <- 를 이용해서 변수에 데이터를 할당
a = 100
b <- 100
a
b
sqrt(9)
sqrt(a)
sqrt(x=9)
x
sqrt(x <- 9)
x
? c
myvector <- c(100,200,300)
myvector
myvector[1]
myvector <- c(100,200,300)
myvector
myvector[1]
myvector[2]
myvector[3]
myvector2 <- c(10,20,30)
myvector
myvector2 <- c(10,20,30
myvector2 <- c(10,20,30
myvector2 <- c(10,20,3
myvector
myvector2
myvector + 20
myvector * 2
myvector + 20
myvector + myvector2
mytext <- c("java","R", "hadoop", "android")
mytext[1]
mytext[1,2]
mytext[c(1,2)] # vector의 1번 요소와 2번 요소만 출력
1:3
1:100
mytext[-1]
mytext[c(-1,-3)]
mytext[c(-1:3)]
mytext[-c(1:3)]
mytext[c(-1:-3)]
#TRUE와 FALSE를 이용해서 작업하기
mytext[c(T,T,F,F)]
mytext[mytext=="java"]
mytext[mytext=="jav"]
numlist
numlist <- 1:100
numlist
numlist%%2==0
numlist[numlist%%2==0] #짝수 구하기기
numlist[numlist%%2==0] #짝수 구하기
numlist[numlist%%2==1] #홀수 구하기
numlist2 <- seq(1,12)
numlist2 <- seq(1,10)
numlist2
? seq
numlist2 <- seq(1,10, by=2)
numlist2
v1 <-
v1 <- c(70,80,90,100)
names(v1)
names(v1) <- c("국어","수학","영어,"자바")
names(v1) <- c("국어","수학","영어","자바")
v1
length(v1)
mean(v1) # 평균
max(v1) # 최대값
min(v1) # 최소값
#행렬
matrox(1:15)
#행렬
matrix(1:15)
? matrix
mymat1 <- matrix(1:15, ncol=3)
mymat1
mymat1 <- matrix(1:15,ncol=3)
mymat1 <- matrix(1:15,ncol=3,byrow = T)
mymat1
mymat1[2,2]
mymat1[1,c(1:3)]
mymat1[1,]
mymat1[,1]
# 1행과 3행을 뺀 데이터
mymat1[c(-1,-3),]
# 1행관 3행 데이터
mymat1[c(1,3),]
# 미니실습1 - 2행부터 4행까지 출력 단, 2번 3번 열만
mymat1[c(2:4),c(2,3)]
# 컬럼을 하나 추가
cbind(mymat1,c(1, 11, 111,1111))
# 컬럼을 하나 추가
cbind(mymat1,c(1, 11, 111, 1111))
# 컬럼을 하나 추가
addmymat1 <- cbind(mymat1,c(1, 11, 111, 1111))
addmymat1
addmymat2 <- rbind(mymat1,c(1,11))
addmymat2
addmymat2 <- rbind(mymat1,c(1,11,111,1111))
addmymat2
colnames(mymat1) -< c("a", "b", "c")
colnames(mymat1) <-  c("a", "b", "c")
mymat1
rownames(mymat1) <- c("r1","r2","r3","r4","r5")
mymat1
mean(mymat1)
mymat2 <- matrix(c(80,90,70,100,89,99,78,78,90,78,82,78,99,89,78,90),byrow = T)
mymat2
mymat2 <- matrix(c(80,90,70,100,89,99,78,78,90,78,82,78,99,89,78,90), ncol = 4,byrow = T)
mymat2
mymat2 <- matrix(c(80,90,70,100,89,99,78,72,90,78,82,78,99,89,78,90), ncol = 4,byrow = T)
mymat2
colnames(mymat2) <- c("국어","영어","과학","수학")
rownames(mymat2) <- c("kim","lee","hong","jang")
mymat2
mean(c(mymat2[1,],mymat2[2,],mymat2[3,],mymat2[4,])
mean(c(mymat2[1,],mymat2[2,],mymat2[3,],mymat2[4,]))
mean(mymat2[1,],mymat2[2,],mymat2[3,],mymat2[4,])
? mean
avgPerson <- c(mean(mymat2[1,]),mean(mymat2[2,]),mean(mymat2[3,]),mean(mymat2[4,]))
avgPerson
avg_name <- c(mean(mymat2[1,],2),mean(mymat2[2,]),mean(mymat2[3,]),mean(mymat2[4,]))
avg_name
avg_name <- c(mean(mymat2[1,],-2),mean(mymat2[2,]),mean(mymat2[3,]),mean(mymat2[4,]))
avg_name
avg_name <- c(mean(mymat2[1,],trim = 2),mean(mymat2[2,]),mean(mymat2[3,]),mean(mymat2[4,]))
avg_name
avg_name <- c(mean(mymat2[1,],trim = -1),mean(mymat2[2,]),mean(mymat2[3,]),mean(mymat2[4,]))
avg_name
avg_name <- c(mean(mymat2[1,],trim = 2),mean(mymat2[2,]),mean(mymat2[3,]),mean(mymat2[4,]))
avg_name <- c(mean(mymat2[1,],trim = 1),mean(mymat2[2,]),mean(mymat2[3,]),mean(mymat2[4,]))
avg_name
mymat2
avg_name <- c(mean(mymat2[1,],x = 2),mean(mymat2[2,]),mean(mymat2[3,]),mean(mymat2[4,]))
avg_name
mymat2 <- matrix(c(80,90,70,100,89,99,78,72,90,78,82,78,99,89,78,90), ncol = 4,byrow = T)
mymat2
colnames(mymat2) <- c("국어","영어","과학","수학")
rownames(mymat2) <- c("kim","lee","hong","jang")
avg_name <- c(mean(mymat2[1,]),mean(mymat2[2,]),mean(mymat2[3,]),mean(mymat2[4,]))
avg_name
mymat2 <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90), ncol = 4,byrow = T)
mymat2
colnames(mymat2) <- c("국어","영어","과학","수학")
rownames(mymat2) <- c("kim","lee","hong","jang")
avg_name <- c(mean(mymat2[1,]),mean(mymat2[2,]),mean(mymat2[3,]),mean(mymat2[4,]))
avg_name
avg_name <- c(mean(mymat2[,1]),mean(mymat2[,2]),mean(mymat2[,3]),mean(mymat2[,4]))
avg_name <- c(mean(mymat2[1,]),mean(mymat2[2,]),mean(mymat2[3,]),mean(mymat2[4,]))
avg_name
avg_subject <- c(mean(mymat2[,1]),mean(mymat2[,2]),mean(mymat2[,3]),mean(mymat2[,4]))
avg_subject
mymat2 <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90), ncol = 4,byrow = T)
colnames(mymat2) <- c("국어","영어","과학","수학")
rownames(mymat2) <- c("kim","lee","hong","jang")
avg_name <- c(mean(mymat2[1,]),mean(mymat2[2,]),mean(mymat2[3,]),mean(mymat2[4,]))
avg_subject <- c(mean(mymat2[,1]),mean(mymat2[,2]),mean(mymat2[,3]),mean(mymat2[,4]))
mymat2
avg_name
avg_subject
dataframeMat1 <- matrix(1:15,ncol=3,byrow = T)
dataframeMat1
dataframeMat2 <- data.frame(dataframeMat1)
dataframeMat2
myframeMat2 <- data.frame(dataframeMat1)
myframeMat2
dataframeMat1[,1]
myframeMat2[,1]
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#matrix의 1열만 char타입으로 변경
as.character(dataframeMat1[,1])
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#matrix의 1열만 char타입으로 변경
dataframeMat1[,1] <- as.character(dataframeMat1[,1])
dataframeMat1
myframeMat2[,1] <- as.character(myframeMat2[,1])
myframeMat2
#str함수는 dataframe내부의 데이터형을 볼 수 있는 함수
str(my)
mydataframe <- data.frame(dataframeMat1)
mydataframe
mydataframe[,1]
dataframeMat1[,1]
mydataframe[,1]
dataframeMat1 <- matrix(1:15,ncol=3,byrow = T)
dataframeMat1
mydataframe <- data.frame(dataframeMat1)
mydataframe
dataframeMat1[,1]
mydataframe[,1]
#str함수는 dataframe내부의 데이터형을 볼 수 있는 함수
str(mydataframe)
mydataframe[,1] <- as.character(mydataframe[,1])
mydataframe
str(mydataframe[,1])
str(mydataframe)
mydataframe
mydataframe$X1 #$를 이용해서 열의 이름을 접근할 수 있다
#dataframe에 열을 추가
col4 <- c(1,1,1,1,1)
mydataframe$x4 <- col4
mydataframe
#필요한 곳에서 dataframe을 다시 matrix로 변경
dataframeMat2 <- as.matrix(mydataframe)
dataframeMat2
#dataframe만들기
#벡터를 여러 개 만들어서 dataframe을 작성
eng <- c(100,99,90)
math <- c(100,99,100)
mydf1 <- data.frame(eng, math)
mydf1
mean(mydf1$eng)
mean(mydf1$math)
#dataframe을 직접 정의
mydf2 <- data.frame(eng=c(100,100,100),m=c(90,90,90))
ntdf2
mydf2
#
m <- matrix(1:15,ncol=3,byrow=T)
m
d <- data.frame(m)
d
t(m)
m <- t(m)
m
d <- t(d)
d
product <- c("사과","딸기","수박")
price <- c(1800,1500,3000)
soldNum <- c(24,38,13)
exam1 <- data.frame(product, price, soldNum)
exam1
colnames(exam1) <- c("제품","가격","판매량")
exam1
mean(exam1[,2])
mean(exam1[,3])
product <- c("사과","딸기","수박")
price <- c(1800,1500,3000)
soldNum <- c(24,38,13)
exam1 <- data.frame(product, price, soldNum)
exam1
exam1$product <- "제품"
colnames(exam1) <- c("제품","가격","판매량")
mean(exam1$가격)
product <- c("사과","딸기","수박")
price <- c(1800,1500,3000)
soldNum <- c(24,38,13)
exam1 <- data.frame(product, price, soldNum)
exam1
colnames(exam1) <- c("제품","가격","판매량")
exam1
mean(exam1$가격)
mean(exam1$판매량)
num <- 88
num <- 88
if(num>=90) {
print("합격")
} else {
print("다시")
}
print("수")
if(num>=90) {
print("수")
} else if(num >= 80) {
print("우")
} else {
print("다시")
}
myv <- c(1:10)
print(i)
myv <- c(1:10)
for (i in myv) {
print(i)
}
#1부터 10까지 합 구하기
num <- 0
for (i in 10) {
num += i
}
for (i in 10) {
num + num + i
}
num
#1부터 10까지 합 구하기
num <- 0
for (i in myv) {
num + num + i
}
num
#1부터 10까지 합 구하기
num <- 0
for (i in 10) {
num = num + i
}
num
#1부터 10까지 합 구하기
num <- 0
for (i in myv) {
num = num + i
}
num
#1부터 10까지 합구하기 - ver2
myv2 <- c(1:100)
sum(myv2)
#csv는 기본 패키지로 사용가능
#csv를 읽기
mdf <-  read.csv(file = "csv_exam.csv")
mdf
mdf[2,2]
mdf[2,]
#dataframe에서 조건에 만족하는 데이터를 조회
m <- matrix(1:20,ncol = 4)
m
d <- data.frame(m)
d
myresult <- d[d$X3 >=13,]
myresult
#조건에 만족하는 데이터를 result.csv로 저장
write.csv(myresult, file = "result.csv")
#미션
mdf
#미션
examCsv <- mdf[mdf$science>=80,]
examCsv
examCsv$mytotal <- c(sum(examCsv[6,-c(examCsv$id,examCsv$class)]), sum(examCsv[17,-c(examCsv$id,examCsv$class)]), sum(examCsv[18,-c(examCsv$id,examCsv$class)]), sum(examCsv[19,-c(examCsv$id,examCsv$class)]))
exanCsv
#미션
examCsv <- mdf[mdf$science>=80,]
examCsv$mytotal <- c(sum(examCsv[6,-c(examCsv$id,examCsv$class)]), sum(examCsv[17,-c(examCsv$id,examCsv$class)]), sum(examCsv[18,-c(examCsv$id,examCsv$class)]), sum(examCsv[19,-c(examCsv$id,examCsv$class)]))
exanCsv
examCsv
#미션
examCsv <- mdf[mdf$science>=80,]
examCsv$mytotal <- c(sum(examCsv[1,-c(examCsv$id,examCsv$class)]), sum(examCsv[2,-c(examCsv$id,examCsv$class)]), sum(examCsv[3,-c(examCsv$id,examCsv$class)]), sum(examCsv[4,-c(examCsv$id,examCsv$class)]))
examCsv
examCsv$myavg <- c(mean(examCsv[1,-c(examCsv$id,examCsv$class)]), mean(examCsv[2,-c(examCsv$id,examCsv$class)]), mean(examCsv[3,-c(examCsv$id,examCsv$class)]), mean(examCsv[4,-c(examCsv$id,examCsv$class)]))
examCsv$myavg <- c(mean(examCsv[1,-c(examCsv$id,examCsv$class)]), mean(examCsv[2,-c(examCsv$id,examCsv$class)]), mean(examCsv[3,-c(examCsv$id,examCsv$class)]), mean(examCsv[4,-c(examCsv$id,examCsv$class)]))
#미션
examCsv <- mdf[mdf$science>=80,]
examCsv$mytotal <- c(sum(examCsv[1,-c(examCsv$id,examCsv$class)]), sum(examCsv[2,-c(examCsv$id,examCsv$class)]), sum(examCsv[3,-c(examCsv$id,examCsv$class)]), sum(examCsv[4,-c(examCsv$id,examCsv$class)]))
examCsv
examCsv$mytotal <- c(sum(examCsv[1,c(-examCsv$id,-examCsv$class)]), sum(examCsv[2,-c(examCsv$id,examCsv$class)]), sum(examCsv[3,-c(examCsv$id,examCsv$class)]), sum(examCsv[4,-c(examCsv$id,examCsv$class)]))
examCsv
sum(examCsv[1,])
#미션
examCsv <- mdf[mdf$science>=80,]
sum(examCsv[1,])
sum(examCsv[1,-c(examCsv$id,examCsv$class)])
sum(examCsv[c(1,-c(examCsv$id,examCsv$class)),])
sum(examCsv[1,c(examCsv$math,examCsv$english,examCsv$science)])
#미션
examCsv <- mdf[mdf$science>=80,]
sum(examCsv[1,c(examCsv$math,examCsv$english,examCsv$science)])
#미션
examCsv <- mdf[mdf$science>=80,]
examCsv
sum(examCsv[1,c(examCsv$math,examCsv$english,examCsv$science)])
sum(examCsv[1,c(examCsv$english,examCsv$science)])
sum(examCsv[1,c(examCsv$math,examCsv$science)])
sum(examCsv[1,c(examCsv$math,examCsv$english)])
d <- examCsv[1]
sum(d[1,c(examCsv$math,examCsv$english,examCsv$science)])
d
d <- examCsv[1,]
d
sum(d[1,c(examCsv$math,examCsv$english,examCsv$science)])
sum(d[1,-c(examCsv$math,examCsv$english,examCsv$science)])
sum(d[1,])
sum(d[1,-c(d$id)])
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
examCsv
examCsv$mytotal <- c(sum(examCsv[1,-c(examCsv$id,examCsv$class)]), sum(examCsv[2,-c(examCsv$id,examCsv$class)]), sum(examCsv[3,-c(examCsv$id,examCsv$class)]), sum(examCsv[4,-c(examCsv$id,examCsv$class)]))
examCsv
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
class(examCsv)
#csv는 기본 패키지로 사용가능
#csv를 읽기
mdf <- read.csv(file = "csv_exam.csv")
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
examCsv$mytotal <- c(sum(examCsv[1,-c(examCsv$id,examCsv$class)]), sum(examCsv[2,-c(examCsv$id,examCsv$class)]), sum(examCsv[3,-c(examCsv$id,examCsv$class)]), sum(examCsv[4,-c(examCsv$id,examCsv$class)]))
examCsv
d <- sum(examCsv[-c(examCsv$id,examCsv$class),])
d
d <- sum(examCsv[1,])
d
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
d <- sum(examCsv[1,])
d
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
examCsv$mytotal <- c(sum(examCsv[1,examCsv$math:examCsv$science)]), sum(examCsv[2,-c(examCsv$id,examCsv$class)]), sum(examCsv[3,-c(examCsv$id,examCsv$class)]), sum(examCsv[4,-c(examCsv$id,examCsv$class)]))
examCsv$mytotal <- c(sum(examCsv[1,c(examCsv$math:examCsv$science)]), sum(examCsv[2,-c(examCsv$id,examCsv$class)]), sum(examCsv[3,-c(examCsv$id,examCsv$class)]), sum(examCsv[4,-c(examCsv$id,examCsv$class)]))
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
examCsv$mytotal <- c(sum(examCsv[1,c(examCsv$math:examCsv$science)]), sum(examCsv[2,-c(examCsv$id,examCsv$class)]), sum(examCsv[3,-c(examCsv$id,examCsv$class)]), sum(examCsv[4,-c(examCsv$id,examCsv$class)]))
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
examCsv$mytotal <- c(sum(examCsv[1,-c(examCsv$id,examCsv$class)]), sum(examCsv[2,-c(examCsv$id,examCsv$class)]), sum(examCsv[3,-c(examCsv$id,examCsv$class)]), sum(examCsv[4,-c(examCsv$id,examCsv$class)]))
examCsv
examCsv$mytotal <- c(sum(examCsv[1,c(-examCsv$id,-examCsv$class)]), sum(examCsv[2,-c(examCsv$id,examCsv$class)]), sum(examCsv[3,-c(examCsv$id,examCsv$class)]), sum(examCsv[4,-c(examCsv$id,examCsv$class)]))
examCsv
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
examCsv$mytotal <- c(sum(examCsv[1,3:5]), sum(examCsv[2,3:5]), sum(examCsv[3,3:5]), sum(examCsv[4,3:5]))
examCsv
Csv$myavg <- c(mean(examCsv[1,3:5]), mean(examCsv[2,3:5]), mean(examCsv[3,3:5]), mea
examCsv
examCsv
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
examCsv$mytotal <- c(sum(examCsv[1,3:5]), sum(examCsv[2,3:5]), sum(examCsv[3,3:5]), sum(examCsv[4,3:5]))
examCsv
examCsv$myavg <- c(mean(examCsv[1,3:5]), mean(examCsv[2,3:5]), mean(examCsv[3,3:5]), mean(examCsv[4,3:5]))
? mean
v1 <-examCsv[1,3:5]
v2 <-examCsv[2,3:5]
v3 <-examCsv[3,3:5]
v4 <-examCsv[4,3:5]
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
examCsv$mytotal <- c(sum(examCsv[1,3:5]), sum(examCsv[2,3:5]), sum(examCsv[3,3:5]), sum(examCsv[4,3:5]))
examCsv
v1 <-examCsv[1,3:5]
v2 <-examCsv[2,3:5]
v3 <-examCsv[3,3:5]
v4 <-examCsv[4,3:5]
examCsv$myavg <- c(mean(v1), mean(v2), mean(v3), mean(v4))
examCsv$myavg <- c(mean(c(examCsv$math, examCsv$english, examCsv$science)), mean(examCsv[2,3:5]), mean(examCsv[3,3:5]), mean(examCsv[4,3:5]))
mean(c(examCsv$math, examCsv$english, examCsv$science)
mean(c(examCsv$math, examCsv$english, examCsv$science))
mean(examCsv[1,c(examCsv$math, examCsv$english, examCsv$science)])
m1 <- matrix(examCsv[1,3:5])
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
examCsv$mytotal <- c(sum(examCsv[1,3:5]), sum(examCsv[2,3:5]), sum(examCsv[3,3:5]), sum(examCsv[4,3:5]))
examCsv
m1 <- matrix(examCsv[1,3:5])
m2 <- matrix(examCsv[2,3:5])
m3 <- matrix(examCsv[3,3:5])
m4 <- matrix(examCsv[4,3:5])
examCsv$myavg <- c(mean(m1),mean(m2),mean(m3),mean(m4))
as.numeric(examCsv[,-c(examCsv$id, examCsv$class)])
str(examCsv)
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
as.numeric(examCsv[,-c(examCsv$id, examCsv$class)])
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
as.numeric(examCsv[,-c(examCsv$id, examCsv$class)])
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
str(examCsv)
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
str(examCsv)
examCsv$myavg <- c(mean(m1),mean(m2),mean(m3),mean(m4))
? mean
str(examCsv)
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
str(examCsv)
examCsv$mytotal <- c(sum(examCsv[1,3:5]), sum(examCsv[2,3:5]), sum(examCsv[3,3:5]), sum(examCsv[4,3:5]))
examCsv
#미션
examCsv <- data.frame(mdf[mdf$science>=80,])
examCsv$mytotal <- c(sum(examCsv[1,3:5]), sum(examCsv[2,3:5]), sum(examCsv[3,3:5]), sum(examCsv[4,3:5]))
examCsv$mytotal <- c(sum(examCsv[1,3:5]), sum(examCsv[2,3:5]), sum(examCsv[3,3:5]), sum(examCsv[4,3:5]))
examCsv$myavg <- c(mean(as.numeric(examCsv[1,3:5])),mean(as.numeric(examCsv[2,3:5])),mean(as.numeric(examCsv[3,3:5])),mean(as.numeric(examCsv[4,3:5])))
examCsv
#미션
examCsv <- mdf[mdf$science>=80,]
#csv는 기본 패키지로 사용가능
#csv를 읽기
mdf <- read.csv(file = "csv_exam.csv")
#미션
examCsv <- mdf[mdf$science>=80,]
#답
examCsv$mytotal <- c(as.numeric(examCsv$math + examCsv$english + examCsv$science))
examCsv
examCsv <- as.numeric(examCsv$mytotal / 3)
examCsv
#미션
examCsv <- mdf[mdf$science>=80,]
#답
examCsv$mytotal <- c(as.numeric(examCsv$math + examCsv$english + examCsv$science))
examCsv$myavg <- as.numeric(examCsv$mytotal / 3)
examCsv
write.csv(examCsv, file = "result2.csv")
